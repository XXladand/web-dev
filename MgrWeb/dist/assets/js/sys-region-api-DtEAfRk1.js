import{a as s}from"./axios-CURSphCx.js";import{B as e,j as t,R as a}from"./index-DWGcUZYU.js";const n=function(s){return{apiSysRegionAddPost:async(e,t={})=>{const a=new URL("/api/sysRegion/add","https://example.com");let n;s&&(n=s.baseOptions);const o={method:"POST",...n,...t},i={},r={};if(s&&s.accessToken){const e="function"==typeof s.accessToken?await s.accessToken():await s.accessToken;i.Authorization="Bearer "+e}i["Content-Type"]="application/json-patch+json";const c=new URLSearchParams(a.search);for(const s in r)c.set(s,r[s]);for(const s in t.params)c.set(s,t.params[s]);a.search=new URLSearchParams(c).toString();let p=n&&n.headers?n.headers:{};o.headers={...i,...p,...t.headers};const h="string"!=typeof e||"application/json"===o.headers["Content-Type"];return o.data=h?JSON.stringify(void 0!==e?e:{}):e||"",{url:a.pathname+a.search+a.hash,options:o}},apiSysRegionDeletePost:async(e,t={})=>{const a=new URL("/api/sysRegion/delete","https://example.com");let n;s&&(n=s.baseOptions);const o={method:"POST",...n,...t},i={},r={};if(s&&s.accessToken){const e="function"==typeof s.accessToken?await s.accessToken():await s.accessToken;i.Authorization="Bearer "+e}i["Content-Type"]="application/json-patch+json";const c=new URLSearchParams(a.search);for(const s in r)c.set(s,r[s]);for(const s in t.params)c.set(s,t.params[s]);a.search=new URLSearchParams(c).toString();let p=n&&n.headers?n.headers:{};o.headers={...i,...p,...t.headers};const h="string"!=typeof e||"application/json"===o.headers["Content-Type"];return o.data=h?JSON.stringify(void 0!==e?e:{}):e||"",{url:a.pathname+a.search+a.hash,options:o}},apiSysRegionListGet:async(e,t={})=>{if(null==e)throw new a("id","Required parameter id was null or undefined when calling apiSysRegionListGet.");const n=new URL("/api/sysRegion/list","https://example.com");let o;s&&(o=s.baseOptions);const i={method:"GET",...o,...t},r={},c={};if(s&&s.accessToken){const e="function"==typeof s.accessToken?await s.accessToken():await s.accessToken;r.Authorization="Bearer "+e}void 0!==e&&(c.Id=e);const p=new URLSearchParams(n.search);for(const s in c)p.set(s,c[s]);for(const s in t.params)p.set(s,t.params[s]);n.search=new URLSearchParams(p).toString();let h=o&&o.headers?o.headers:{};return i.headers={...r,...h,...t.headers},{url:n.pathname+n.search+n.hash,options:i}},apiSysRegionPagePost:async(e,t={})=>{const a=new URL("/api/sysRegion/page","https://example.com");let n;s&&(n=s.baseOptions);const o={method:"POST",...n,...t},i={},r={};if(s&&s.accessToken){const e="function"==typeof s.accessToken?await s.accessToken():await s.accessToken;i.Authorization="Bearer "+e}i["Content-Type"]="application/json-patch+json";const c=new URLSearchParams(a.search);for(const s in r)c.set(s,r[s]);for(const s in t.params)c.set(s,t.params[s]);a.search=new URLSearchParams(c).toString();let p=n&&n.headers?n.headers:{};o.headers={...i,...p,...t.headers};const h="string"!=typeof e||"application/json"===o.headers["Content-Type"];return o.data=h?JSON.stringify(void 0!==e?e:{}):e||"",{url:a.pathname+a.search+a.hash,options:o}},apiSysRegionSyncPost:async(e={})=>{const t=new URL("/api/sysRegion/sync","https://example.com");let a;s&&(a=s.baseOptions);const n={method:"POST",...a,...e},o={},i={};if(s&&s.accessToken){const e="function"==typeof s.accessToken?await s.accessToken():await s.accessToken;o.Authorization="Bearer "+e}const r=new URLSearchParams(t.search);for(const s in i)r.set(s,i[s]);for(const s in e.params)r.set(s,e.params[s]);t.search=new URLSearchParams(r).toString();let c=a&&a.headers?a.headers:{};return n.headers={...o,...c,...e.headers},{url:t.pathname+t.search+t.hash,options:n}},apiSysRegionUpdatePost:async(e,t={})=>{const a=new URL("/api/sysRegion/update","https://example.com");let n;s&&(n=s.baseOptions);const o={method:"POST",...n,...t},i={},r={};if(s&&s.accessToken){const e="function"==typeof s.accessToken?await s.accessToken():await s.accessToken;i.Authorization="Bearer "+e}i["Content-Type"]="application/json-patch+json";const c=new URLSearchParams(a.search);for(const s in r)c.set(s,r[s]);for(const s in t.params)c.set(s,t.params[s]);a.search=new URLSearchParams(c).toString();let p=n&&n.headers?n.headers:{};o.headers={...i,...p,...t.headers};const h="string"!=typeof e||"application/json"===o.headers["Content-Type"];return o.data=h?JSON.stringify(void 0!==e?e:{}):e||"",{url:a.pathname+a.search+a.hash,options:o}}}},o=function(e){return{async apiSysRegionAddPost(a,o){const i=await n(e).apiSysRegionAddPost(a,o);return(e=s,a=t)=>{const n={...i.options,url:a+i.url};return e.request(n)}},async apiSysRegionDeletePost(a,o){const i=await n(e).apiSysRegionDeletePost(a,o);return(e=s,a=t)=>{const n={...i.options,url:a+i.url};return e.request(n)}},async apiSysRegionListGet(a,o){const i=await n(e).apiSysRegionListGet(a,o);return(e=s,a=t)=>{const n={...i.options,url:a+i.url};return e.request(n)}},async apiSysRegionPagePost(a,o){const i=await n(e).apiSysRegionPagePost(a,o);return(e=s,a=t)=>{const n={...i.options,url:a+i.url};return e.request(n)}},async apiSysRegionSyncPost(a){const o=await n(e).apiSysRegionSyncPost(a);return(e=s,a=t)=>{const n={...o.options,url:a+o.url};return e.request(n)}},async apiSysRegionUpdatePost(a,o){const i=await n(e).apiSysRegionUpdatePost(a,o);return(e=s,a=t)=>{const n={...i.options,url:a+i.url};return e.request(n)}}}};class i extends e{async apiSysRegionAddPost(s,e){return o(this.configuration).apiSysRegionAddPost(s,e).then((s=>s(this.axios,this.basePath)))}async apiSysRegionDeletePost(s,e){return o(this.configuration).apiSysRegionDeletePost(s,e).then((s=>s(this.axios,this.basePath)))}async apiSysRegionListGet(s,e){return o(this.configuration).apiSysRegionListGet(s,e).then((s=>s(this.axios,this.basePath)))}async apiSysRegionPagePost(s,e){return o(this.configuration).apiSysRegionPagePost(s,e).then((s=>s(this.axios,this.basePath)))}async apiSysRegionSyncPost(s){return o(this.configuration).apiSysRegionSyncPost(s).then((s=>s(this.axios,this.basePath)))}async apiSysRegionUpdatePost(s,e){return o(this.configuration).apiSysRegionUpdatePost(s,e).then((s=>s(this.axios,this.basePath)))}}export{i as S};
