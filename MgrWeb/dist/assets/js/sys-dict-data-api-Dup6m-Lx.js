import{a as t}from"./axios-CURSphCx.js";import{B as a,j as s,R as e}from"./index-DWGcUZYU.js";const n=function(t){return{apiSysDictDataAddPost:async(a,s={})=>{const e=new URL("/api/sysDictData/add","https://example.com");let n;t&&(n=t.baseOptions);const i={method:"POST",...n,...s},o={},c={};if(t&&t.accessToken){const a="function"==typeof t.accessToken?await t.accessToken():await t.accessToken;o.Authorization="Bearer "+a}o["Content-Type"]="application/json-patch+json";const r=new URLSearchParams(e.search);for(const t in c)r.set(t,c[t]);for(const t in s.params)r.set(t,s.params[t]);e.search=new URLSearchParams(r).toString();let h=n&&n.headers?n.headers:{};i.headers={...o,...h,...s.headers};const p="string"!=typeof a||"application/json"===i.headers["Content-Type"];return i.data=p?JSON.stringify(void 0!==a?a:{}):a||"",{url:e.pathname+e.search+e.hash,options:i}},apiSysDictDataDataListCodeGet:async(a,s={})=>{if(null==a)throw new e("code","Required parameter code was null or undefined when calling apiSysDictDataDataListCodeGet.");const n="/api/sysDictData/dataList/{code}".replace("{code}",encodeURIComponent(String(a))),i=new URL(n,"https://example.com");let o;t&&(o=t.baseOptions);const c={method:"GET",...o,...s},r={},h={};if(t&&t.accessToken){const a="function"==typeof t.accessToken?await t.accessToken():await t.accessToken;r.Authorization="Bearer "+a}const p=new URLSearchParams(i.search);for(const t in h)p.set(t,h[t]);for(const t in s.params)p.set(t,s.params[t]);i.search=new URLSearchParams(p).toString();let D=o&&o.headers?o.headers:{};return c.headers={...r,...D,...s.headers},{url:i.pathname+i.search+i.hash,options:c}},apiSysDictDataDataListGet:async(a,s,n={})=>{if(null==a)throw new e("code","Required parameter code was null or undefined when calling apiSysDictDataDataListGet.");const i=new URL("/api/sysDictData/dataList","https://example.com");let o;t&&(o=t.baseOptions);const c={method:"GET",...o,...n},r={},h={};if(t&&t.accessToken){const a="function"==typeof t.accessToken?await t.accessToken():await t.accessToken;r.Authorization="Bearer "+a}void 0!==a&&(h.Code=a),void 0!==s&&(h.Status=s);const p=new URLSearchParams(i.search);for(const t in h)p.set(t,h[t]);for(const t in n.params)p.set(t,n.params[t]);i.search=new URLSearchParams(p).toString();let D=o&&o.headers?o.headers:{};return c.headers={...r,...D,...n.headers},{url:i.pathname+i.search+i.hash,options:c}},apiSysDictDataDeletePost:async(a,s={})=>{const e=new URL("/api/sysDictData/delete","https://example.com");let n;t&&(n=t.baseOptions);const i={method:"POST",...n,...s},o={},c={};if(t&&t.accessToken){const a="function"==typeof t.accessToken?await t.accessToken():await t.accessToken;o.Authorization="Bearer "+a}o["Content-Type"]="application/json-patch+json";const r=new URLSearchParams(e.search);for(const t in c)r.set(t,c[t]);for(const t in s.params)r.set(t,s.params[t]);e.search=new URLSearchParams(r).toString();let h=n&&n.headers?n.headers:{};i.headers={...o,...h,...s.headers};const p="string"!=typeof a||"application/json"===i.headers["Content-Type"];return i.data=p?JSON.stringify(void 0!==a?a:{}):a||"",{url:e.pathname+e.search+e.hash,options:i}},apiSysDictDataDetailGet:async(a,s,n={})=>{if(null==a)throw new e("id","Required parameter id was null or undefined when calling apiSysDictDataDetailGet.");const i=new URL("/api/sysDictData/detail","https://example.com");let o;t&&(o=t.baseOptions);const c={method:"GET",...o,...n},r={},h={};if(t&&t.accessToken){const a="function"==typeof t.accessToken?await t.accessToken():await t.accessToken;r.Authorization="Bearer "+a}void 0!==s&&(h.Status=s),void 0!==a&&(h.Id=a);const p=new URLSearchParams(i.search);for(const t in h)p.set(t,h[t]);for(const t in n.params)p.set(t,n.params[t]);i.search=new URLSearchParams(p).toString();let D=o&&o.headers?o.headers:{};return c.headers={...r,...D,...n.headers},{url:i.pathname+i.search+i.hash,options:c}},apiSysDictDataListGet:async(a,s={})=>{if(null==a)throw new e("dictTypeId","Required parameter dictTypeId was null or undefined when calling apiSysDictDataListGet.");const n=new URL("/api/sysDictData/list","https://example.com");let i;t&&(i=t.baseOptions);const o={method:"GET",...i,...s},c={},r={};if(t&&t.accessToken){const a="function"==typeof t.accessToken?await t.accessToken():await t.accessToken;c.Authorization="Bearer "+a}void 0!==a&&(r.DictTypeId=a);const h=new URLSearchParams(n.search);for(const t in r)h.set(t,r[t]);for(const t in s.params)h.set(t,s.params[t]);n.search=new URLSearchParams(h).toString();let p=i&&i.headers?i.headers:{};return o.headers={...c,...p,...s.headers},{url:n.pathname+n.search+n.hash,options:o}},apiSysDictDataPagePost:async(a,s={})=>{const e=new URL("/api/sysDictData/page","https://example.com");let n;t&&(n=t.baseOptions);const i={method:"POST",...n,...s},o={},c={};if(t&&t.accessToken){const a="function"==typeof t.accessToken?await t.accessToken():await t.accessToken;o.Authorization="Bearer "+a}o["Content-Type"]="application/json-patch+json";const r=new URLSearchParams(e.search);for(const t in c)r.set(t,c[t]);for(const t in s.params)r.set(t,s.params[t]);e.search=new URLSearchParams(r).toString();let h=n&&n.headers?n.headers:{};i.headers={...o,...h,...s.headers};const p="string"!=typeof a||"application/json"===i.headers["Content-Type"];return i.data=p?JSON.stringify(void 0!==a?a:{}):a||"",{url:e.pathname+e.search+e.hash,options:i}},apiSysDictDataSetStatusPost:async(a,s={})=>{const e=new URL("/api/sysDictData/setStatus","https://example.com");let n;t&&(n=t.baseOptions);const i={method:"POST",...n,...s},o={},c={};if(t&&t.accessToken){const a="function"==typeof t.accessToken?await t.accessToken():await t.accessToken;o.Authorization="Bearer "+a}o["Content-Type"]="application/json-patch+json";const r=new URLSearchParams(e.search);for(const t in c)r.set(t,c[t]);for(const t in s.params)r.set(t,s.params[t]);e.search=new URLSearchParams(r).toString();let h=n&&n.headers?n.headers:{};i.headers={...o,...h,...s.headers};const p="string"!=typeof a||"application/json"===i.headers["Content-Type"];return i.data=p?JSON.stringify(void 0!==a?a:{}):a||"",{url:e.pathname+e.search+e.hash,options:i}},apiSysDictDataUpdatePost:async(a,s={})=>{const e=new URL("/api/sysDictData/update","https://example.com");let n;t&&(n=t.baseOptions);const i={method:"POST",...n,...s},o={},c={};if(t&&t.accessToken){const a="function"==typeof t.accessToken?await t.accessToken():await t.accessToken;o.Authorization="Bearer "+a}o["Content-Type"]="application/json-patch+json";const r=new URLSearchParams(e.search);for(const t in c)r.set(t,c[t]);for(const t in s.params)r.set(t,s.params[t]);e.search=new URLSearchParams(r).toString();let h=n&&n.headers?n.headers:{};i.headers={...o,...h,...s.headers};const p="string"!=typeof a||"application/json"===i.headers["Content-Type"];return i.data=p?JSON.stringify(void 0!==a?a:{}):a||"",{url:e.pathname+e.search+e.hash,options:i}}}},i=function(a){return{async apiSysDictDataAddPost(e,i){const o=await n(a).apiSysDictDataAddPost(e,i);return(a=t,e=s)=>{const n={...o.options,url:e+o.url};return a.request(n)}},async apiSysDictDataDataListCodeGet(e,i){const o=await n(a).apiSysDictDataDataListCodeGet(e,i);return(a=t,e=s)=>{const n={...o.options,url:e+o.url};return a.request(n)}},async apiSysDictDataDataListGet(e,i,o){const c=await n(a).apiSysDictDataDataListGet(e,i,o);return(a=t,e=s)=>{const n={...c.options,url:e+c.url};return a.request(n)}},async apiSysDictDataDeletePost(e,i){const o=await n(a).apiSysDictDataDeletePost(e,i);return(a=t,e=s)=>{const n={...o.options,url:e+o.url};return a.request(n)}},async apiSysDictDataDetailGet(e,i,o){const c=await n(a).apiSysDictDataDetailGet(e,i,o);return(a=t,e=s)=>{const n={...c.options,url:e+c.url};return a.request(n)}},async apiSysDictDataListGet(e,i){const o=await n(a).apiSysDictDataListGet(e,i);return(a=t,e=s)=>{const n={...o.options,url:e+o.url};return a.request(n)}},async apiSysDictDataPagePost(e,i){const o=await n(a).apiSysDictDataPagePost(e,i);return(a=t,e=s)=>{const n={...o.options,url:e+o.url};return a.request(n)}},async apiSysDictDataSetStatusPost(e,i){const o=await n(a).apiSysDictDataSetStatusPost(e,i);return(a=t,e=s)=>{const n={...o.options,url:e+o.url};return a.request(n)}},async apiSysDictDataUpdatePost(e,i){const o=await n(a).apiSysDictDataUpdatePost(e,i);return(a=t,e=s)=>{const n={...o.options,url:e+o.url};return a.request(n)}}}};class o extends a{async apiSysDictDataAddPost(t,a){return i(this.configuration).apiSysDictDataAddPost(t,a).then((t=>t(this.axios,this.basePath)))}async apiSysDictDataDataListCodeGet(t,a){return i(this.configuration).apiSysDictDataDataListCodeGet(t,a).then((t=>t(this.axios,this.basePath)))}async apiSysDictDataDataListGet(t,a,s){return i(this.configuration).apiSysDictDataDataListGet(t,a,s).then((t=>t(this.axios,this.basePath)))}async apiSysDictDataDeletePost(t,a){return i(this.configuration).apiSysDictDataDeletePost(t,a).then((t=>t(this.axios,this.basePath)))}async apiSysDictDataDetailGet(t,a,s){return i(this.configuration).apiSysDictDataDetailGet(t,a,s).then((t=>t(this.axios,this.basePath)))}async apiSysDictDataListGet(t,a){return i(this.configuration).apiSysDictDataListGet(t,a).then((t=>t(this.axios,this.basePath)))}async apiSysDictDataPagePost(t,a){return i(this.configuration).apiSysDictDataPagePost(t,a).then((t=>t(this.axios,this.basePath)))}async apiSysDictDataSetStatusPost(t,a){return i(this.configuration).apiSysDictDataSetStatusPost(t,a).then((t=>t(this.axios,this.basePath)))}async apiSysDictDataUpdatePost(t,a){return i(this.configuration).apiSysDictDataUpdatePost(t,a).then((t=>t(this.axios,this.basePath)))}}export{o as S};
