import{d as l,_ as e,ah as t,o as a,c as n,V as i,P as u,a as s,T as o,bm as c,bk as d}from"./@vue-CX_mlhJe.js";import{_ as p}from"./_plugin-vue_export-helper-BCo6x5W8.js";const f=l=>(c("data-v-092673e5"),l=l(),d(),l),r={class:"sys-open-access-container"},h={style:{color:"#fff"}},m=f((()=>s("span",null," 说明 ",-1))),g={class:"text-content"},_=f((()=>s("h2",null,"OpenAPI 使用",-1))),A=f((()=>s("li",null,[o(" 通过对请求的签名，可以达到以下目的： "),s("ul",null,[s("li",null,"免登录识别访问接口用户的身份"),s("li",null,"防止潜在的重放攻击")])],-1))),S=f((()=>s("h2",null,"OpenAPI 签名流程",-1))),v=f((()=>s("h3",null,"公共请求参数",-1))),y=f((()=>s("p",null,"在原始请求的基础上添加 Header 请求参数",-1))),D=f((()=>s("h3",null,"计算签名",-1))),w={class:"el-alert el-alert--info is-light"},H=l({name:"sysOpenAccessHelpView"}),x=p(l({...H,setup(l,{expose:c}){const d=e({isShowDialog:!1});return c({openDialog:()=>{d.isShowDialog=!0}}),(l,e)=>{const c=t("ele-QuestionFilled"),p=t("el-icon"),f=t("el-tag"),H=t("el-divider"),x=t("el-link"),V=t("el-dialog");return a(),n("div",r,[i(V,{modelValue:d.isShowDialog,"onUpdate:modelValue":e[0]||(e[0]=l=>d.isShowDialog=l),draggable:"","close-on-click-modal":!1,width:"900px"},{header:u((()=>[s("div",h,[i(p,{size:"16",style:{"margin-right":"3px",display:"inline","vertical-align":"middle"}},{default:u((()=>[i(c)])),_:1}),m])])),default:u((()=>[s("div",g,[_,s("ul",null,[s("li",null,[o(" 在需要使用 Signature 身份验证的 Api 中贴上 "),s("p",null,[i(f,null,{default:u((()=>[o("[Authorize(AuthenticationSchemes = SignatureAuthenticationDefaults.AuthenticationScheme)]")])),_:1})])]),s("li",null,[o(" 如果 Api 需要保留 Jwt 方式的身份验证，可贴上 "),s("p",null,[i(f,null,{default:u((()=>[o('[Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme + "," + SignatureAuthenticationDefaults.AuthenticationScheme)]')])),_:1})])]),A]),i(H),S,o(" 客户端在请求时，需要按照如下步骤生成签名 Signature，并添加公共参数： "),v,y,s("ul",null,[s("li",null,[i(f,{effect:"plain"},{default:u((()=>[o("accessKey")])),_:1}),o("：身份标识")]),s("li",null,[i(f,{effect:"plain"},{default:u((()=>[o("timestamp")])),_:1}),o("：时间戳，精确到秒")]),s("li",null,[i(f,{effect:"plain"},{default:u((()=>[o("nonce")])),_:1}),o("：唯一随机数，建议为一个6位的随机数")]),s("li",null,[i(f,{effect:"plain"},{default:u((()=>[o("sign")])),_:1}),o("：签名数据（见“计算签名”部分）")])]),D,s("ul",null,[s("li",null,[o(" 按照如下顺序对请求中的参数进行排序，各个参数通过&进行拼接（中间不含空格）： "),s("p",null,[i(f,null,{default:u((()=>[o("method & url & accessKey & timestamp & nonce")])),_:1})]),s("ul",null,[s("li",null,[i(f,{effect:"plain"},{default:u((()=>[o("method")])),_:1}),o(" 需要大写，如：GET")]),s("li",null,[i(f,{effect:"plain"},{default:u((()=>[o("url")])),_:1}),o(" 去除协议、域名、参数，以 / 开头，如：/api/demo/helloWord")])])]),s("li",null,[o("使用 HMAC-SHA256 协议创建基于哈希的消息身份验证代码 (HMAC)，以 "),i(f,{effect:"plain"},{default:u((()=>[o("accessSecret")])),_:1}),o(" 作为密钥，对上面拼接的参数进行计算签名，所得签名进行 Base-64 编码")])])]),s("div",w,[o(" HMAC-SHA256 在线计算： "),i(x,{href:"https://1024tools.com/hmac",target:"_blank",type:"primary"},{default:u((()=>[o("https://1024tools.com/hmac")])),_:1})])])),_:1},8,["modelValue"])])}}}),[["__scopeId","data-v-092673e5"]]);export{x as default};
